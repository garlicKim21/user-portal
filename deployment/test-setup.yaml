# A 클러스터에 배포할 포털 애플리케이션과 필요한 RBAC 설정

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: portal-service-account
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: portal-multi-cluster-role
rules:
# 로컬 클러스터 (A)에서의 권한 - 최소한만
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list"]
# 타겟 클러스터 (B)는 별도 인증으로 처리

---  
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: portal-multi-cluster-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: portal-multi-cluster-role
subjects:
- kind: ServiceAccount
  name: portal-service-account
  namespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-config
  namespace: default
data:
  TARGET_CLUSTER_SERVER: "https://b-cluster-api-server:6443"
  WEB_CONSOLE_BASE_URL: "https://console.basphere.dev"
  LOG_LEVEL: "INFO"
  GIN_MODE: "release"
  
  # OIDC 설정 (A 클러스터의 Keycloak)
  OIDC_ISSUER_URL: "https://keycloak.basphere.dev/realms/kubernetes-portal"
  OIDC_CLIENT_ID: "portal-backend"
  ALLOWED_ORIGINS: "https://portal.basphere.dev"

---
apiVersion: v1  
kind: Secret
metadata:
  name: portal-secrets
  namespace: default
type: Opaque
data:
  # Base64로 인코딩된 값들
  OIDC_CLIENT_SECRET: <BASE64_ENCODED_SECRET>
  JWT_SECRET_KEY: <BASE64_ENCODED_JWT_KEY>
  TARGET_CLUSTER_TOKEN: <BASE64_ENCODED_SERVICE_ACCOUNT_TOKEN>

---
apiVersion: apps/v1
kind: Deployment  
metadata:
  name: portal-backend
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: portal-backend
  template:
    metadata:
      labels:
        app: portal-backend
    spec:
      serviceAccountName: portal-service-account
      containers:
      - name: portal-backend
        image: your-registry/portal-backend:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: portal-config
        - secretRef:
            name: portal-secrets
        volumeMounts:
        - name: target-cluster-ca
          mountPath: /etc/ssl/certs/target-cluster-ca.crt
          subPath: ca.crt
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready  
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: target-cluster-ca
        secret:
          secretName: target-cluster-ca-cert

---
apiVersion: v1
kind: Service
metadata:
  name: portal-backend-service
  namespace: default
spec:
  selector:
    app: portal-backend
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: portal-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - portal.basphere.dev
    secretName: portal-tls-cert
  rules:
  - host: portal.basphere.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: portal-backend-service
            port:
              number: 80